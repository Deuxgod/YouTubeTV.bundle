# -*- coding: utf-8 -*-

# Copyright (c) 2014, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTLICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def GetVideoData(url):
    # make url for simple video_id
    if 'm.youtube.com' not in url:
        url = 'https://m.youtube.com/watch?ajax=1&v=%s' % url
    try:
        res = JSON.ObjectFromString(HTTP.Request(
            url,
            headers={
                'User-Agent': (
                    'Mozilla/5.0 (iPad; CPU OS 7_0_4 like Mac OS X) '
                    'AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 '
                    'Mobile/11B554a Safari/9537.54'
                )
            }   # FIXME Cache
        ).content[4:])['content']

    except:
        raise Ex.MediaNotAvailable

    return res


def GetVideoUrls(info):
    try:
        info = info['swfcfg']['args']
    except:
        raise Ex.MediaNotAvailable

    fmt_meta = info['url_encoded_fmt_stream_map'].split(',')
    fmt_list = info['fmt_list'].split(',')

    ret = {}
    for item in fmt_meta:
        item = String.ParseQueryString(item)
        for val in item:
            ret[item['itag'][0]] = {
                'url': item['url'][0],
                'resolution': 0,
            }

    for item in fmt_list:
        item = item.split('/')
        ret[item[0]]['resolution'] = item[1].split('x')[1]

    if not len(ret):
        raise Ex.MediaNotAvailable

    return ret


def GetVideoObject(url, callback=True):
    item = GetVideoData(url)
    if not item:
        raise Ex.MediaNotAvailable

    vco = VideoClipObject(
        title=u'%s' % item['video']['title'],
        summary=u'%s' % item['video']['description'],
        thumb=item['video']['thumbnail_for_watch'],
        rating=(float(item['swfcfg']['args']['avg_rating'])*2),
        tags=item['swfcfg']['args']['keywords'].split(','),
        # TODO
        # originally_available_at=Datetime.ParseDate(
        #     item['video']['time_created_text'],
        #     '%b %d, %Y'
        # ).date(),
        duration=(item['video']['length_seconds']*1000),
    )
    if callback:
        vco.key = callback
        vco.rating_key = url
        vco.items = GetMediaObjectsFromData(item)

    return vco


def GetMediaObjects(url):
    return GetMediaObjectsFromData(GetVideoData(url))


def GetMediaObjectsFromData(info):
    info = GetVideoUrls(info)
    return [
        MediaObject(
            parts=[
                PartObject(key=Callback(PlayVideo, url=item['url']))
            ],
            video_resolution=item['resolution'],
            audio_channels=2,
            container='mp4',
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            optimized_for_streaming=True
        ) for item in sorted(
            info.values(),
            key=lambda k: k['resolution'],
            reverse=True
        )
    ]


@indirect
def PlayVideo(url):
    return IndirectResponse(VideoClipObject, key=url)