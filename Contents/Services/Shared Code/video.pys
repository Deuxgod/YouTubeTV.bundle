# -*- coding: utf-8 -*-

# Copyright (c) 2014, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTLICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


definitions = {
    'sd': (36, 18),
    'hd': (22, 18, 36),
}
resolutions = {
    22: 720,
    18: 360,
    36: 240,
}


def GetUrlByVideoId(video_id):
    return 'https://m.youtube.com/watch?ajax=1&v=%s' % video_id


def GetVideoData(url):
    # make url for simple video_id
    if 'm.youtube.com' not in url:
        url = 'https://m.youtube.com/watch?ajax=1&v=%s' % url
    try:
        res = JSON.ObjectFromString(HTTP.Request(
            url,
            headers={
                'User-Agent': (
                    'Mozilla/5.0 (iPad; CPU OS 7_0_4 like Mac OS X) '
                    'AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 '
                    'Mobile/11B554a Safari/9537.54'
                )
            }   # FIXME Cache
        ).content[4:])['content']

    except:
        raise Ex.MediaNotAvailable

    return res


def GetVideoUrls(url):
    try:
        info = GetVideoData(
            url
        )['swfcfg']['args']['url_encoded_fmt_stream_map']
    except:
        raise Ex.MediaNotAvailable

    fmt_meta = info.split(',')

    ret = {}
    for item in fmt_meta:
        item = String.ParseQueryString(item)
        for val in item:
            ret[item['itag'][0]] = item['url'][0]

    if not len(ret):
        raise Ex.MediaNotAvailable

    return ret


def GetMediaObjects(url, play_callback, definition='hd'):
    return [
        MediaObject(
            parts=[
                PartObject(key=Callback(play_callback, url=url, fmt=key))
            ],
            video_resolution=resolutions[key],
            audio_channels=2,
            container='mp4',
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            optimized_for_streaming=True
        ) for key in definitions[definition]
    ]


def PlayVideo(url, fmt):
    info = GetVideoUrls(url)
    fmt = int(fmt)
    if fmt not in info:
        fmt = info.keys()[0]

    return IndirectResponse(VideoClipObject, key=info[fmt])
